diff --git a/dist/index.mjs b/dist/index.mjs
index f866095e94f78b13465f1c0741353e0a5f653dd9..9c4c9eb9a0e766f6535a41fe2c76f79566d7d4e3 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -1,4 +1,15 @@
-import { getHighlighter, bundledLanguages } from 'shikiji';
+import { getHighlighterCore, loadWasm } from 'shikiji/core';
+import materialThemePalenight from 'shikiji/themes/material-theme-palenight.mjs';
+import tsx from 'shikiji/langs/tsx.mjs';
+import markdown from 'shikiji/langs/markdown.mjs';
+
+import wasm from 'shikiji/onig.wasm';
+
+const module = await fetch(wasm)
+  .then((response) => response.arrayBuffer())
+  .then((bytes) => new WebAssembly.Module(bytes));
+
+await loadWasm(obj => WebAssembly.instantiate(module, obj));
 
 function parseHighlightLines(attrs) {
   if (!attrs)
@@ -44,13 +55,12 @@ function setup(markdownit, highlighter, options) {
       code,
       codeOptions
     );
-  };
+  }
 }
 async function markdownItShikiji(options) {
-  const themeNames = ("themes" in options ? Object.values(options.themes) : [options.theme]).filter(Boolean);
-  const highlighter = await getHighlighter({
-    themes: themeNames,
-    langs: options.langs || Object.keys(bundledLanguages)
+  const highlighter = await getHighlighterCore({
+    themes: [materialThemePalenight],
+    langs: [tsx, markdown]
   });
   return function(markdownit) {
     setup(markdownit, highlighter, options);
